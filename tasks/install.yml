---
- name: Install PyEnv
  ansible.builtin.git:
    repo: https://github.com/pyenv/pyenv.git
    dest: "{{ pyenv_path }}"
    version: "{{ pyenv_version }}"
    update: "{{ pyenv_update_git_install }}"
    force: true

- name: Install PyEnv-virtualenv plugin
  ansible.builtin.git:
    repo: https://github.com/yyuu/pyenv-virtualenv.git
    dest: "{{ pyenv_path }}/plugins/pyenv-virtualenv"
    version: "{{ pyenv_virtualenv_version }}"
    update: "{{ pyenv_update_git_install }}"
    force: true
  when: pyenv_enable_virtualenvs

- name: Install PyEnv-update plugin
  ansible.builtin.git:
    repo: https://github.com/pyenv/pyenv-update.git
    dest: "{{ pyenv_path }}/plugins/pyenv-update"
    version: "{{ pyenv_update_version }}"
    update: "{{ pyenv_update_git_install }}"
    force: true
  when: pyenv_update

- name: Install .pyenvrc
  ansible.builtin.template:
    src: ".pyenvrc.j2"
    dest: "{{ pyenvrc_path }}/.pyenvrc"
    owner: "{{ pyenv_owner }}"
    mode: "0644"

- name: Install custom .pyenvrc
  ansible.builtin.copy:
    src: "{{ pyenv_custom_pyenvrc_file }}"
    dest: "{{ pyenvrc_path }}/.pyenvrc.custom"
    owner: "{{ pyenv_owner }}"
    mode: "0644"
  when: pyenv_custom_pyenvrc_file is defined

- name: Use legacy variable pyenv_setting_path if available
  ansible.builtin.set_fact:
    pyenv_shellrc_file: "{{ pyenv_setting_path }}"
  when: pyenv_setting_path is defined

- name: Print deprecation warning if pyenv_setting_path defined
  ansible.builtin.debug:
    msg: pyenv_setting_path is deprecated, use pyenv_shellrc_file instead
  when: pyenv_setting_path is defined

- name: "Load pyenv env variables in {{ pyenv_shellrc_file }}"
  ansible.builtin.lineinfile:
    dest: "{{ pyenv_shellrc_file }}"
    regexp: "\\.pyenvrc$"
    line: "source {{ pyenvrc_path }}/.pyenvrc"
    state: present
    mode: "0644"
    create: true

- name: "Add pyenv autocomplete in {{ pyenv_shellrc_file }}"
  ansible.builtin.lineinfile:
    dest: "{{ pyenv_shellrc_file }}"
    regexp: "pyenv\\.bash$"
    line: "source {{ pyenv_path }}/completions/pyenv.bash"
    mode: "0644"
    state: present
  when: pyenv_enable_autocompletion

- name: Update Pyenv interpreter list
  ansible.builtin.shell:
    cmd: . {{ pyenvrc_path }}/.pyenvrc && pyenv update
  register: output
  changed_when: "output.rc == 0"
  when: pyenv_update

- name: Uninstall existing Python interpreters w/ wrong compilation flags
  ansible.builtin.shell:
    cmd: ". {{ pyenvrc_path }}/.pyenvrc && pyenv uninstall -f {{ item }}"
  args:
    removes: "{{ pyenv_path }}/versions/{{ item }}/bin/python"
  loop: "{{ ansible_local['pyenv_python_installations']['to_reinstall'] | default([]) }}"
  when: pyenv_uninstall_python_w_wrong_configure_opts

- name: "Install Python interpreters {{ pyenv_python_versions }}"
  ansible.builtin.shell:
    cmd: ". {{ pyenvrc_path }}/.pyenvrc && pyenv install {{ pyenv_install_extra_opts }} {{ item }}"
  args:
    creates: "{{ pyenv_path }}/versions/{{ item }}/bin/python"
  with_items: "{{ pyenv_python_versions }}"

- name: Create virtual environments
  ansible.builtin.shell:
    cmd: . {{ pyenvrc_path }}/.pyenvrc && pyenv virtualenv {{ item.py_version }} {{ item.venv_name }}
  args:
    creates: "{{ pyenv_path }}/versions/{{ item.py_version }}/envs/{{ item.venv_name }}/bin/python"
  with_items: "{{ pyenv_virtualenvs }}"
  when: pyenv_enable_virtualenvs

- name: Update the pyenv globals
  when: pyenv_global is defined
  vars:
    pyenv_global_versions_path: "{{ pyenv_path }}/version"
  block:
    - name: "Does pyenv globals file exist?"
      ansible.builtin.stat:
        path: "{{ pyenv_global_versions_path }}"
      register: _pyenv_globals_file
    - name: "Read the pyenv global versions"
      ansible.builtin.slurp:
        src: "{{ pyenv_global_versions_path }}"
      register: _pyenv_globals_file_content
      when: _pyenv_globals_file.stat.exists
    - name: "Set pyenv global {{ pyenv_global }}"
      ansible.builtin.shell: . {{ pyenvrc_path }}/.pyenvrc && pyenv global {{ pyenv_global | join(' ') }} && pyenv rehash
      changed_when: true
      when: >
        (
          _pyenv_globals_file.stat.exists
          and (_pyenv_globals_file_content.content | b64decode | split('\n') | select() | list) != pyenv_global
        )
        or not _pyenv_globals_file.stat.exists
